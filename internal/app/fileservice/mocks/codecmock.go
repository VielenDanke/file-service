// Code generated by mockery v2.5.1. DO NOT EDIT.

package mocks

import (
	io "io"

	codec "github.com/unistack-org/micro/v3/codec"

	mock "github.com/stretchr/testify/mock"
)

// MockCodec is an autogenerated mock type for the MockCodec type
type MockCodec struct {
	mock.Mock
}

// Marshal provides a mock function with given fields: _a0
func (_m *MockCodec) Marshal(_a0 interface{}) ([]byte, error) {
	ret := _m.Called(_a0)

	var r0 []byte
	if rf, ok := ret.Get(0).(func(interface{}) []byte); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(interface{}) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReadBody provides a mock function with given fields: _a0, _a1
func (_m *MockCodec) ReadBody(_a0 io.Reader, _a1 interface{}) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(io.Reader, interface{}) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ReadHeader provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockCodec) ReadHeader(_a0 io.Reader, _a1 *codec.Message, _a2 codec.MessageType) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(io.Reader, *codec.Message, codec.MessageType) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// String provides a mock function with given fields:
func (_m *MockCodec) String() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Unmarshal provides a mock function with given fields: _a0, _a1
func (_m *MockCodec) Unmarshal(_a0 []byte, _a1 interface{}) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func([]byte, interface{}) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Write provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockCodec) Write(_a0 io.Writer, _a1 *codec.Message, _a2 interface{}) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(io.Writer, *codec.Message, interface{}) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
