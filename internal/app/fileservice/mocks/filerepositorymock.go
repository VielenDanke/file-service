// Code generated by mockery v2.5.1. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	model "github.com/vielendanke/file-service/internal/app/fileservice/model"
)

// FileRepository is an autogenerated mock type for the FileRepository type
type FileRepository struct {
	mock.Mock
}

// CheckIfExists provides a mock function with given fields: ctx, fields
func (_m *FileRepository) CheckIfExists(ctx context.Context, fields ...string) error {
	_va := make([]interface{}, len(fields))
	for _i := range fields {
		_va[_i] = fields[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, ...string) error); ok {
		r0 = rf(ctx, fields...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindFileMetadataByID provides a mock function with given fields: ctx, id
func (_m *FileRepository) FindFileMetadataByID(ctx context.Context, id string) (map[string]string, error) {
	ret := _m.Called(ctx, id)

	var r0 map[string]string
	if rf, ok := ret.Get(0).(func(context.Context, string) map[string]string); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindFileNameByID provides a mock function with given fields: ctx, id
func (_m *FileRepository) FindFileNameByID(ctx context.Context, id string) (string, error) {
	ret := _m.Called(ctx, id)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SaveFile provides a mock function with given fields: ctx, f, metadata
func (_m *FileRepository) SaveFile(ctx context.Context, f model.FileModel, metadata string) error {
	ret := _m.Called(ctx, f, metadata)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, model.FileModel, string) error); ok {
		r0 = rf(ctx, f, metadata)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateFileMetadataByID provides a mock function with given fields: ctx, metadata, id
func (_m *FileRepository) UpdateFileMetadataByID(ctx context.Context, metadata string, id string) error {
	ret := _m.Called(ctx, metadata, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, metadata, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
