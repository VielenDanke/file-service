// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/file-service.proto

package pb

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	math "math"
)

import (
	context "context"
	api "github.com/unistack-org/micro/v3/api"
	client "github.com/unistack-org/micro/v3/client"
	server "github.com/unistack-org/micro/v3/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for FileProcessingService service

func NewFileProcessingServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{
		&api.Endpoint{
			Name:    "FileProcessingService.FileProcessing",
			Path:    []string{"/upload"},
			Method:  []string{"POST"},
			Body:    "",
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "FileProcessingService.GetFileMetadata",
			Path:    []string{"/get/{file_metadata_id}"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "FileProcessingService.DownloadFile",
			Path:    []string{"/download/{file_download_id}"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
	}
}

// Client API for FileProcessingService service

type FileProcessingService interface {
	FileProcessing(ctx context.Context, req *FileProcessingRequest, opts ...client.CallOption) (*FileProcessingResponse, error)
	GetFileMetadata(ctx context.Context, req *FileMetadataRequest, opts ...client.CallOption) (*FileMetadataResponse, error)
	DownloadFile(ctx context.Context, req *FileDownloadRequest, opts ...client.CallOption) (*FileDownloadResponse, error)
}

type fileProcessingService struct {
	c    client.Client
	name string
}

func NewFileProcessingService(name string, c client.Client) FileProcessingService {
	return &fileProcessingService{
		c:    c,
		name: name,
	}
}

func (c *fileProcessingService) FileProcessing(ctx context.Context, req *FileProcessingRequest, opts ...client.CallOption) (*FileProcessingResponse, error) {
	rsp := &FileProcessingResponse{}
	err := c.c.Call(ctx, c.c.NewRequest(c.name, "FileProcessingService.FileProcessing", req), rsp, opts...)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *fileProcessingService) GetFileMetadata(ctx context.Context, req *FileMetadataRequest, opts ...client.CallOption) (*FileMetadataResponse, error) {
	rsp := &FileMetadataResponse{}
	err := c.c.Call(ctx, c.c.NewRequest(c.name, "FileProcessingService.GetFileMetadata", req), rsp, opts...)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *fileProcessingService) DownloadFile(ctx context.Context, req *FileDownloadRequest, opts ...client.CallOption) (*FileDownloadResponse, error) {
	rsp := &FileDownloadResponse{}
	err := c.c.Call(ctx, c.c.NewRequest(c.name, "FileProcessingService.DownloadFile", req), rsp, opts...)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

// Server API for FileProcessingService service

type FileProcessingServiceHandler interface {
	FileProcessing(context.Context, *FileProcessingRequest, *FileProcessingResponse) error
	GetFileMetadata(context.Context, *FileMetadataRequest, *FileMetadataResponse) error
	DownloadFile(context.Context, *FileDownloadRequest, *FileDownloadResponse) error
}

func RegisterFileProcessingServiceHandler(s server.Server, hdlr FileProcessingServiceHandler, opts ...server.HandlerOption) error {
	type fileProcessingService interface {
		FileProcessing(ctx context.Context, req *FileProcessingRequest, rsp *FileProcessingResponse) error
		GetFileMetadata(ctx context.Context, req *FileMetadataRequest, rsp *FileMetadataResponse) error
		DownloadFile(ctx context.Context, req *FileDownloadRequest, rsp *FileDownloadResponse) error
	}
	type FileProcessingService struct {
		fileProcessingService
	}
	h := &fileProcessingServiceHandler{hdlr}
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "FileProcessingService.FileProcessing",
		Path:    []string{"/upload"},
		Method:  []string{"POST"},
		Body:    "",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "FileProcessingService.GetFileMetadata",
		Path:    []string{"/get/{file_metadata_id}"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "FileProcessingService.DownloadFile",
		Path:    []string{"/download/{file_download_id}"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	return s.Handle(s.NewHandler(&FileProcessingService{h}, opts...))
}

type fileProcessingServiceHandler struct {
	FileProcessingServiceHandler
}

func (h *fileProcessingServiceHandler) FileProcessing(ctx context.Context, req *FileProcessingRequest, rsp *FileProcessingResponse) error {
	return h.FileProcessingServiceHandler.FileProcessing(ctx, req, rsp)
}

func (h *fileProcessingServiceHandler) GetFileMetadata(ctx context.Context, req *FileMetadataRequest, rsp *FileMetadataResponse) error {
	return h.FileProcessingServiceHandler.GetFileMetadata(ctx, req, rsp)
}

func (h *fileProcessingServiceHandler) DownloadFile(ctx context.Context, req *FileDownloadRequest, rsp *FileDownloadResponse) error {
	return h.FileProcessingServiceHandler.DownloadFile(ctx, req, rsp)
}
