// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/new-service.proto

package pb

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	math "math"
)

import (
	context "context"
	api "github.com/unistack-org/micro/v3/api"
	client "github.com/unistack-org/micro/v3/client"
	server "github.com/unistack-org/micro/v3/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for CurrencyProcessing service

func NewCurrencyProcessingEndpoints() []*api.Endpoint {
	return []*api.Endpoint{
		&api.Endpoint{
			Name:    "CurrencyProcessing.SaveCurrency",
			Path:    []string{"/currencies"},
			Method:  []string{"POST"},
			Body:    "",
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "CurrencyProcessing.GetCurrency",
			Path:    []string{"/currencies"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
	}
}

// Client API for CurrencyProcessing service

type CurrencyProcessingService interface {
	SaveCurrency(ctx context.Context, req *CurrencySaveRequest, opts ...client.CallOption) (*CurrencySaveResponse, error)
	GetCurrency(ctx context.Context, req *CurrencyGetRequest, opts ...client.CallOption) (*CurrencyGetResponse, error)
}

type currencyProcessingService struct {
	c    client.Client
	name string
}

func NewCurrencyProcessingService(name string, c client.Client) CurrencyProcessingService {
	return &currencyProcessingService{
		c:    c,
		name: name,
	}
}

func (c *currencyProcessingService) SaveCurrency(ctx context.Context, req *CurrencySaveRequest, opts ...client.CallOption) (*CurrencySaveResponse, error) {
	rsp := &CurrencySaveResponse{}
	err := c.c.Call(ctx, c.c.NewRequest(c.name, "CurrencyProcessing.SaveCurrency", req), rsp, opts...)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *currencyProcessingService) GetCurrency(ctx context.Context, req *CurrencyGetRequest, opts ...client.CallOption) (*CurrencyGetResponse, error) {
	rsp := &CurrencyGetResponse{}
	err := c.c.Call(ctx, c.c.NewRequest(c.name, "CurrencyProcessing.GetCurrency", req), rsp, opts...)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

// Server API for CurrencyProcessing service

type CurrencyProcessingHandler interface {
	SaveCurrency(context.Context, *CurrencySaveRequest, *CurrencySaveResponse) error
	GetCurrency(context.Context, *CurrencyGetRequest, *CurrencyGetResponse) error
}

func RegisterCurrencyProcessingHandler(s server.Server, hdlr CurrencyProcessingHandler, opts ...server.HandlerOption) error {
	type currencyProcessing interface {
		SaveCurrency(ctx context.Context, req *CurrencySaveRequest, rsp *CurrencySaveResponse) error
		GetCurrency(ctx context.Context, req *CurrencyGetRequest, rsp *CurrencyGetResponse) error
	}
	type CurrencyProcessing struct {
		currencyProcessing
	}
	h := &currencyProcessingHandler{hdlr}
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "CurrencyProcessing.SaveCurrency",
		Path:    []string{"/currencies"},
		Method:  []string{"POST"},
		Body:    "",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "CurrencyProcessing.GetCurrency",
		Path:    []string{"/currencies"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	return s.Handle(s.NewHandler(&CurrencyProcessing{h}, opts...))
}

type currencyProcessingHandler struct {
	CurrencyProcessingHandler
}

func (h *currencyProcessingHandler) SaveCurrency(ctx context.Context, req *CurrencySaveRequest, rsp *CurrencySaveResponse) error {
	return h.CurrencyProcessingHandler.SaveCurrency(ctx, req, rsp)
}

func (h *currencyProcessingHandler) GetCurrency(ctx context.Context, req *CurrencyGetRequest, rsp *CurrencyGetResponse) error {
	return h.CurrencyProcessingHandler.GetCurrency(ctx, req, rsp)
}
