// Code generated by protoc-gen-micro
// source: proto/file-service.proto
package pb

import (
	"context"

	micro_api "github.com/unistack-org/micro/v3/api"
	micro_client "github.com/unistack-org/micro/v3/client"
	micro_server "github.com/unistack-org/micro/v3/server"
)

// NewFileProcessingEndpoints provides api endpoints metdata for FileProcessing service
func NewFileProcessingEndpoints() []*micro_api.Endpoint {
	endpoints := make([]*micro_api.Endpoint, 0, 4)
	var endpoint *micro_api.Endpoint
	endpoint = &micro_api.Endpoint{
		Name:    "FileProcessing.FileProcessing",
		Path:    []string{"/files"},
		Method:  []string{"POST"},
		Body:    "",
		Handler: "rpc",
	}
	endpoints = append(endpoints, endpoint)
	endpoint = &micro_api.Endpoint{
		Name:    "FileProcessing.GetFileMetadata",
		Path:    []string{"/metadata/{metadata_id}"},
		Method:  []string{"GET"},
		Body:    "",
		Handler: "rpc",
	}
	endpoints = append(endpoints, endpoint)
	endpoint = &micro_api.Endpoint{
		Name:    "FileProcessing.DownloadFile",
		Path:    []string{"/files/{file_download_id}"},
		Method:  []string{"GET"},
		Body:    "",
		Handler: "rpc",
	}
	endpoints = append(endpoints, endpoint)
	endpoint = &micro_api.Endpoint{
		Name:    "FileProcessing.UpdateFileMetadata",
		Path:    []string{"/metadata/{update_metadata_id}"},
		Method:  []string{"PUT"},
		Body:    "",
		Handler: "rpc",
	}
	endpoints = append(endpoints, endpoint)
	return endpoints
}

// FileProcessingService interface
type FileProcessingService interface {
	FileProcessing(context.Context, *FileProcessingRequest, ...micro_client.CallOption) (*FileProcessingResponse, error)
	GetFileMetadata(context.Context, *GetMetadataRequest, ...micro_client.CallOption) (*GetMetadataResponse, error)
	DownloadFile(context.Context, *FileDownloadRequest, ...micro_client.CallOption) (*FileDownloadResponse, error)
	UpdateFileMetadata(context.Context, *UpdateMetadataRequest, ...micro_client.CallOption) (*UpdateMetadataResponse, error)
}

// Micro server stuff

// FileProcessingHandler server handler
type FileProcessingHandler interface {
	FileProcessing(context.Context, *FileProcessingRequest, *FileProcessingResponse) error
	GetFileMetadata(context.Context, *GetMetadataRequest, *GetMetadataResponse) error
	DownloadFile(context.Context, *FileDownloadRequest, *FileDownloadResponse) error
	UpdateFileMetadata(context.Context, *UpdateMetadataRequest, *UpdateMetadataResponse) error
}

// RegisterFileProcessingHandler registers server handler
func RegisterFileProcessingHandler(s micro_server.Server, sh FileProcessingHandler, opts ...micro_server.HandlerOption) error {
	type fileProcessing interface {
		FileProcessing(context.Context, *FileProcessingRequest, *FileProcessingResponse) error
		GetFileMetadata(context.Context, *GetMetadataRequest, *GetMetadataResponse) error
		DownloadFile(context.Context, *FileDownloadRequest, *FileDownloadResponse) error
		UpdateFileMetadata(context.Context, *UpdateMetadataRequest, *UpdateMetadataResponse) error
	}
	type FileProcessing struct {
		fileProcessing
	}
	h := &fileProcessingHandler{sh}
	for _, endpoint := range NewFileProcessingEndpoints() {
		opts = append(opts, micro_api.WithEndpoint(endpoint))
	}
	return s.Handle(s.NewHandler(&FileProcessing{h}, opts...))
}
